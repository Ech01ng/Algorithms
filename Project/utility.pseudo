Begin function report_on_productID(line_array, lines, log_size) 
    merge_sort(line_array, 0, 4 * log_size - 1);

    print_logs(line_array, log_size, 1);
    print_logs(line_array, log_size, 2);
    print_logs(line_array, log_size, 3);
    print_logs(line_array, log_size, 4);
End Function

Begin function print_logs(line_array, log_size, line_number) 
    print("---Logs for Line " + line_number + "---");
    Begin for (i = (line_number - 1) * log_size; i < line_number * log_size; i++) 
        log = line_array[i];
        print("Product ID: " + log.productId + ", Issue Code: " + log.issue.code + ", Date & Time: " + log.batchDateTime.dayOfMonth + "-" + log.batchDateTime.hourOfDay + ":" + log.batchDateTime.minuteOfHour);
    End for
End Function

Begin function merge_sort(line_array, left, right) 
    Begin if (left < right) 
        middle = left + (right - left) / 2;
        merge_sort(line_array, left, middle);
        merge_sort(line_array, middle + 1, right);
        merge(line_array, left, middle, right);
    End if
End Function

Begin function merge(line_array, left, middle, right) 
    initialize n1 as middle - left + 1;
    initialize n2 as right - middle;

    initialize L as new Array(n1);
    initialize R as new Array(n2);

    Begin for (i = 0; i < n1; i++) 
        L[i] = line_array[left + i];
    End for
    Begin for (j = 0; j < n2; j++) 
        R[j] = line_array[middle + 1 + j];
    End for

    initialize i as 0;
    initialize j as 0;
    initialize k as left;

    Begin while (i < n1 && j < n2) 
        Begin if (call function compare_lines(L[i], R[j]) <= 0) 
            line_array[k] = L[i];
            i++;
        End if 
        Begin else 
            line_array[k] = R[j];
            j++;
        End else
        k++;
    End while

    Begin while (i < n1) 
        line_array[k] = L[i];
        i++;
        k++;
    End while

    Begin while (j < n2) 
        line_array[k] = R[j];
        j++;
        k++;
    End while
End Function

Begin function compare_lines(line1, line2)
    Compare Line Code
    if it's the same, compare Product ID
    if it's the same, compare Issue Code
    if it's the same, compare Date & Time
    return 0;
End Function

```
Begin function print_all(line_array, left, right)
    Begin for i = left to right
        print("Product ID: " ID Variable ", Line Code: " Line Variable ", Issue Code: " Issue Variable ", Date & Time: " Date Variable);
    End for
End function
```

```
Begin function search_issue_code(line_array)
    //Variable to store the number of occurrences of the issue code and to store the inputed Product ID
    prod, occurrences = 0
    
    //Ask the user for the issue code
    printf("Enter the Product ID: ")
    read prod
    
    //Iterate through the array and count the number of occurrences of the issue code
    Begin for i = 0 TO 44
        Begin if line_array[i].productId.numeric = prod THEN
            occurrences = occurrences + 1
            // Print the first occurrence of the issue code
            printf("Issue Code: " Issue Variable ", Line Code: " Line Variable ", Date & Time: " Date Variable)
        End if
    End for
End function
```

```
Begin function countIssuesForAllProducts(lineArray, arraySize) 
    //Variable to store the maximum product ID in the array
    int max_product_id = 0;
    
    //Find the maximum product ID in the array
    Begin for (let i = 0; i < arraySize; i++) 
        // If the current product ID is greater than the max product ID, update the max product ID
        Begin if (lineArray[i].productId.numeric > maxProductId) 
            // Update the max product ID
            maxProductId = lineArray[i].productId.numeric;
        End if
    End for
    
    //Create an array to store the issue counts for each product ID
    int *issue_counts = (int*)calloc(max_product_id + 1, sizeof(int));
    
    //Iterate through the array and count the number of issues for each product
    Begin for (let i = 0; i < arraySize; i++) 
        //Increment the issue count for the product ID
        issueCounts[lineArray[i].productId.numeric]++;
    End for
    
    printf("---Issue Counts for All Products---");
    
    //Print the number of issues for each product
    Begin for (let i = 0; i <= maxProductId; i++) 
        //If the issue count is greater than 0, print the product ID and the issue count
        Begin if (issueCounts[i] > 0) 
            printf("Product ID: " + i + ", Issue Count: " + issueCounts[i]);
        End if
    End for
    
    //Free the memory allocated for the issueCounts array
    free (issueCounts);
End function
```