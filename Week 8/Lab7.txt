Part 1

Q1.
function findMaxAndMin(A):
    if A is empty:
        return "Array is empty"
    
    maxNum = A[0]  //Initialize maxNum with the first element of A
    minNum = A[0]  //Initialize minNum with the first element of A
    
    for i = 1 to length(A) - 1:
        if A[i] > maxNum:
            maxNum = A[i]  //Update maxNum if a larger element is found
        else if A[i] < minNum:
            minNum = A[i]  //Update minNum if a smaller element is found
    
    return (maxNum, minNum)  //Return the maximum and minimum numbers

//Example usage:
numbers = [5, 2, 9, 1, 7]
result = findMaxAndMin(numbers)
print("Maximum number:", result[0])
print("Minimum number:", result[1])

Q2.
//Big O = O(n) where n = size of array

Q3.
#include <stdio.h>

void findMaxAndMin(int A[], int N, int* max, int* min) {
    //Initialize max and min with the first element of the array
    *max = A[0];
    *min = A[0];

    //Traverse the array and update max and min accordingly
    for (int i = 1; i < N; i++) {
        if (A[i] > *max) {
            *max = A[i];
        }
        if (A[i] < *min) {
            *min = A[i];
        }
    }
}

int main() {
    int A[] = {5, 2, 9, 1, 7}; //Example array
    int N = sizeof(A) / sizeof(A[0]); //Calculate the size of the array

    int max, min;
    findMaxAndMin(A, N, &max, &min);

    printf("Maximum: %d\n", max);
    printf("Minimum: %d\n", min);

    return 0;
}

Q4.
function binarySearch(A, target):
    left = 0
    right = length(A) - 1

    while left <= right:
        mid = (left + right) / 2

        if A[mid] == target:
            return mid
        else if A[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return -1

Q5.
Big O = O(log n) because with each comparison, the algorithm eliminates half of the elements from consideration

Q6.
#include <stdio.h>

//Binary search function
int binarySearch(int arr[], int left, int right, int target) {
    while (left <= right) {
        int mid = left + (right - left) / 2;

        //Check if target is present at mid
        if (arr[mid] == target)
            return mid;

        //If target greater, ignore left half
        if (arr[mid] < target)
            left = mid + 1;

        //If target is smaller, ignore right half
        else
            right = mid - 1;
    }

    //Target is not present in array
    return -1;
}

int main() {
    int arr[] = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20};
    int n = sizeof(arr) / sizeof(arr[0]);
    int target = 12; //change this value for one in array to find its index
    int result = binarySearch(arr, 0, n - 1, target); // arr for array, 0 for first value, n-1 for last value, target for target element
    if (result == -1)
        printf("Element not found in array");
    else
        printf("Element found at index %d", result);
    return 0;
}

Part 2
Merge Sort .c

#include <stdio.h>

void merge(int arr[], int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];

    for (int i = 0; i < n1; i++) {
        L[i] = arr[l + i];
    }
    for (int j = 0; j < n2; j++) {
        R[j] = arr[m + 1 + j];
    }

    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;

        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        merge(arr, l, m, r);
    }
}

int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int arr_size = sizeof(arr) / sizeof(arr[0]);

    printf("Given array is \n");
    for (int i = 0; i < arr_size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    mergeSort(arr, 0, arr_size - 1);

    printf("Sorted array is \n");
    for (int i = 0; i < arr_size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}