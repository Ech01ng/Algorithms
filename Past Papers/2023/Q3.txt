A:

Linked List: A linear data structure where each element is a separate object, known as a node.
The data field stores the data, and the next field is a reference (link) to the next node in the sequence.

Queue: Is a type of abstract data type or collection where the entities in the collection are kept in order and the principal (or only)
operations on the collection are the addition of entities to the rear terminal position, known as enqueue,
and removal of entities from the front terminal position, known as dequeue.
This makes the queue a First-In-First-Out (FIFO) data structure.

BST: is a tree data structure in which each node has at most two children, referred to as the left child and the right child.
For each node, all elements in the left subtree are less than the node, and all elements in the right subtree are greater.

B:

Push
function push(stack, top, element):
    if top equals size of stack - 1:
        print "Stack Overflow" (Stack is full, can't add more elements)
    else:
        increment top by 1
        set stack[top] to element

Pop
function pop(stack, top):
    if top equals -1:
        print "Stack Underflow" (Stack is empty, can't remove more elements)
        return null
    else:
        element = stack[top]
        decrement top by 1
        return element

C:

3
| \
1   5
|  / \
2  4  6
       \
        7

D:

the pre-order traversal is: 3 1 2 5 4 6 7.
This means that 3 is the root of the tree, 1 and 2 are in the left subtree, and 5 4 6 7 are in the right subtree.
Root then Left to right up to down
Pre-order: 3 1 2 5 4 6 7

In order is all elements in order smallest to biggest
In-order: 1 2 3 4 5 6 7

the post-order traversal is: 2 1 4 7 6 5 3.
This means that 2 and 1 are in the left subtree, 4 7 6 5 are in the right subtree, and 3 is the root of the tree.
left to right down to up then root
Post-order: 2 1 4 7 6 5 3

E:

function insertNode(root, value):
   if root is null:
      create a new node with the given value and set it as the root
   else:
      current = root
      while true:
         if value is less than current's value:
            if current has no left child:
               create a new node with the given value and set it as the left child of current
               break the loop
            else:
               set current to current's left child
         else:
            if current has no right child:
               create a new node with the given value and set it as the right child of current
               break the loop
            else:
               set current to current's right child